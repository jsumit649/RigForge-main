# Generated by Django 5.2.5 on 2025-08-11 21:52

import core.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Case',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.TextField(help_text='Detailed description of the component So that youser can see what it is in the frontend')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('brand', models.CharField(choices=[('Corsair', 'Corsair'), ('NZXT', 'NZXT'), ('Cooler Master', 'Cooler Master'), ('Thermaltake', 'Thermaltake'), ('Phanteks', 'Phanteks'), ('Fractal Design', 'Fractal Design'), ('Lian Li', 'Lian Li'), ('Antec', 'Antec'), ('be quiet!', 'be quiet!'), ('SilverStone', 'SilverStone'), ('Deepcool', 'Deepcool'), ('MSI', 'MSI'), ('ASUS', 'ASUS'), ('Gigabyte', 'Gigabyte')], max_length=30, null=True)),
                ('form_factor', models.CharField(choices=[('ATX', 'ATX'), ('Micro-ATX', 'Micro-ATX'), ('Mini-ITX', 'Mini-ITX')], max_length=20)),
                ('color', models.CharField(blank=True, max_length=50, null=True)),
                ('cooling_support', models.BooleanField(default=True)),
                ('fan_slots', models.PositiveIntegerField(help_text='Number of fan slots available')),
                ('front_usb_ports', models.PositiveIntegerField(help_text='Number of front USB ports')),
            ],
            options={
                'verbose_name': 'Case',
                'verbose_name_plural': 'Cases',
            },
        ),
        migrations.CreateModel(
            name='CPU',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.TextField(help_text='Detailed description of the component So that youser can see what it is in the frontend')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('brand', models.CharField(choices=[('Intel', 'Intel'), ('AMD', 'AMD')], max_length=20, null=True)),
                ('socket', models.CharField(choices=[('AM4', 'AM4'), ('AM5', 'AM5'), ('LGA1200', 'LGA1200'), ('LGA1700', 'LGA1700'), ('LGA2011', 'LGA2011')], max_length=20)),
                ('cores', models.PositiveIntegerField()),
                ('threads', models.PositiveIntegerField()),
                ('base_clock', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('boost_clock', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('tdp', models.PositiveIntegerField()),
            ],
            options={
                'verbose_name': 'CPU',
                'verbose_name_plural': 'CPUs',
            },
        ),
        migrations.CreateModel(
            name='CPUCooler',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.TextField(help_text='Detailed description of the component So that youser can see what it is in the frontend')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('brand', models.CharField(choices=[('Cooler Master', 'Cooler Master'), ('Noctua', 'Noctua'), ('Corsair', 'Corsair'), ('be quiet!', 'be quiet!'), ('NZXT', 'NZXT'), ('Deepcool', 'Deepcool'), ('Thermaltake', 'Thermaltake'), ('Arctic', 'Arctic'), ('Cryorig', 'Cryorig'), ('Scythe', 'Scythe'), ('Phanteks', 'Phanteks'), ('Fractal Design', 'Fractal Design'), ('SilverStone', 'SilverStone'), ('MSI', 'MSI'), ('ASUS', 'ASUS')], max_length=30, null=True)),
                ('cooler_type', models.CharField(choices=[('Air', 'Air Cooler'), ('Liquid', 'Liquid Cooler'), ('AIO', 'All-in-One Liquid Cooler')], max_length=10)),
                ('socket_compatibility', models.CharField(choices=[('AM4', 'AM4'), ('AM5', 'AM5'), ('LGA1200', 'LGA1200'), ('LGA1700', 'LGA1700'), ('LGA2011', 'LGA2011')], max_length=20)),
                ('cooling_capacity', models.PositiveIntegerField(help_text='Cooling capacity in Watts')),
            ],
            options={
                'verbose_name': 'CPU Cooler',
                'verbose_name_plural': 'CPU Coolers',
            },
        ),
        migrations.CreateModel(
            name='GPU',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.TextField(help_text='Detailed description of the component So that youser can see what it is in the frontend')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('brand', models.CharField(choices=[('NVIDIA', 'NVIDIA'), ('AMD', 'AMD'), ('Intel', 'Intel'), ('ASUS', 'ASUS'), ('MSI', 'MSI'), ('Gigabyte', 'Gigabyte'), ('ZOTAC', 'ZOTAC'), ('EVGA', 'EVGA'), ('Sapphire', 'Sapphire'), ('PowerColor', 'PowerColor'), ('GALAX', 'GALAX'), ('PNY', 'PNY'), ('XFX', 'XFX'), ('Inno3D', 'Inno3D'), ('Palit', 'Palit'), ('Colorful', 'Colorful')], max_length=20, null=True)),
                ('vram', models.CharField(choices=[('2GB', '2GB'), ('4GB', '4GB'), ('6GB', '6GB'), ('8GB', '8GB'), ('10GB', '10GB'), ('12GB', '12GB'), ('16GB', '16GB'), ('24GB', '24GB')], max_length=5)),
                ('memory_type', models.CharField(choices=[('GDDR5', 'GDDR5'), ('GDDR5X', 'GDDR5X'), ('GDDR6', 'GDDR6'), ('GDDR6X', 'GDDR6X')], max_length=10)),
                ('base_clock', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('boost_clock', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('tdp', models.PositiveIntegerField()),
            ],
            options={
                'verbose_name': 'GPU',
                'verbose_name_plural': 'GPUs',
            },
        ),
        migrations.CreateModel(
            name='HDDStorage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.TextField(help_text='Detailed description of the component So that youser can see what it is in the frontend')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('brand', models.CharField(choices=[('Western Digital', 'Western Digital'), ('Seagate', 'Seagate'), ('Toshiba', 'Toshiba'), ('Hitachi', 'Hitachi'), ('Samsung', 'Samsung'), ('HGST', 'HGST'), ('Fujitsu', 'Fujitsu'), ('Maxtor', 'Maxtor')], max_length=30, null=True)),
                ('capacity', models.PositiveIntegerField(help_text='Capacity in GB')),
                ('rpm', models.PositiveIntegerField(help_text='Revolutions Per Minute (RPM)')),
            ],
            options={
                'verbose_name': 'HDD Storage',
                'verbose_name_plural': 'HDD Storages',
            },
        ),
        migrations.CreateModel(
            name='Motherboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.TextField(help_text='Detailed description of the component So that youser can see what it is in the frontend')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('brand', models.CharField(choices=[('ASUS', 'ASUS'), ('MSI', 'MSI'), ('Gigabyte', 'Gigabyte'), ('ASRock', 'ASRock'), ('Biostar', 'Biostar'), ('EVGA', 'EVGA'), ('NZXT', 'NZXT'), ('Colorful', 'Colorful'), ('Supermicro', 'Supermicro')], max_length=20, null=True)),
                ('socket', models.CharField(choices=[('AM4', 'AM4'), ('AM5', 'AM5'), ('LGA1200', 'LGA1200'), ('LGA1700', 'LGA1700'), ('LGA2011', 'LGA2011')], max_length=20)),
                ('form_factor', models.CharField(choices=[('ATX', 'ATX'), ('Micro-ATX', 'Micro-ATX'), ('Mini-ITX', 'Mini-ITX')], max_length=20)),
                ('ram_type', models.CharField(choices=[('DDR4', 'DDR4'), ('DDR5', 'DDR5')], max_length=10)),
                ('ram_slots', models.PositiveIntegerField()),
                ('max_ram', models.PositiveIntegerField(help_text='Maximum RAM in GB')),
            ],
            options={
                'verbose_name': 'Motherboard',
                'verbose_name_plural': 'Motherboards',
            },
        ),
        migrations.CreateModel(
            name='PSU',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.TextField(help_text='Detailed description of the component So that youser can see what it is in the frontend')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('brand', models.CharField(choices=[('Corsair', 'Corsair'), ('EVGA', 'EVGA'), ('Seasonic', 'Seasonic'), ('Cooler Master', 'Cooler Master'), ('Antec', 'Antec'), ('Thermaltake', 'Thermaltake'), ('SilverStone', 'SilverStone'), ('NZXT', 'NZXT'), ('be quiet!', 'be quiet!'), ('ASUS', 'ASUS'), ('Gigabyte', 'Gigabyte'), ('MSI', 'MSI'), ('FSP', 'FSP')], max_length=20, null=True)),
                ('power_rating', models.PositiveIntegerField(help_text='Power rating in Watts')),
                ('efficiency_rating', models.CharField(choices=[('80+', '80 Plus'), ('80+ Bronze', '80 Plus Bronze'), ('80+ Silver', '80 Plus Silver'), ('80+ Gold', '80 Plus Gold'), ('80+ Platinum', '80 Plus Platinum'), ('80+ Titanium', '80 Plus Titanium')], max_length=20)),
                ('modularity', models.CharField(choices=[('Non-Modular', 'Non-Modular'), ('Semi-Modular', 'Semi-Modular'), ('Fully-Modular', 'Fully Modular')], max_length=20)),
                ('cables_included', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'PSU',
                'verbose_name_plural': 'PSUs',
            },
        ),
        migrations.CreateModel(
            name='RAM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.TextField(help_text='Detailed description of the component So that youser can see what it is in the frontend')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('brand', models.CharField(choices=[('Corsair', 'Corsair'), ('G.Skill', 'G.Skill'), ('Kingston', 'Kingston'), ('Crucial', 'Crucial'), ('ADATA', 'ADATA'), ('TeamGroup', 'TeamGroup'), ('Patriot', 'Patriot'), ('Samsung', 'Samsung'), ('HyperX', 'HyperX'), ('PNY', 'PNY'), ('Transcend', 'Transcend')], max_length=20, null=True)),
                ('ram_type', models.CharField(choices=[('DDR4', 'DDR4'), ('DDR5', 'DDR5')], max_length=10)),
                ('capacity', models.PositiveIntegerField(help_text='Capacity in GB')),
                ('speed', models.PositiveIntegerField(help_text='Speed in MHz')),
            ],
            options={
                'verbose_name': 'RAM',
                'verbose_name_plural': 'RAMs',
            },
        ),
        migrations.CreateModel(
            name='SSDStorage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.TextField(help_text='Detailed description of the component So that youser can see what it is in the frontend')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('brand', models.CharField(choices=[('Samsung', 'Samsung'), ('Western Digital', 'Western Digital'), ('Crucial', 'Crucial'), ('Kingston', 'Kingston'), ('ADATA', 'ADATA'), ('Seagate', 'Seagate'), ('Corsair', 'Corsair'), ('SanDisk', 'SanDisk'), ('Transcend', 'Transcend'), ('PNY', 'PNY'), ('Intel', 'Intel'), ('SK hynix', 'SK hynix'), ('TeamGroup', 'TeamGroup')], max_length=30, null=True)),
                ('capacity', models.PositiveIntegerField(help_text='Capacity in GB')),
                ('pcie_generation', models.CharField(choices=[('Gen3', 'PCIe Gen 3'), ('Gen4', 'PCIe Gen 4'), ('Gen5', 'PCIe Gen 5')], max_length=10)),
                ('read_speed', models.PositiveIntegerField(help_text='Read Speed in MB/s')),
                ('write_speed', models.PositiveIntegerField(help_text='Write Speed in MB/s')),
            ],
            options={
                'verbose_name': 'SSD Storage',
                'verbose_name_plural': 'SSD Storages',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=200, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('bio', models.TextField(blank=True, null=True)),
                ('username', models.CharField(max_length=150, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', core.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('line1', models.CharField(max_length=255)),
                ('line2', models.CharField(blank=True, max_length=255)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('postal_code', models.CharField(max_length=20)),
                ('country', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='cart', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='core.cart')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
        ),
        migrations.CreateModel(
            name='PCBuild',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(blank=True, max_length=200)),
                ('Total_Price', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('CPU', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.cpu')),
                ('CPU_Cooler', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.cpucooler')),
                ('Case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.case')),
                ('GPU', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.gpu')),
                ('HDD_Storage', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.hddstorage')),
                ('Motherboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.motherboard')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pc_builds', to=settings.AUTH_USER_MODEL)),
                ('PSU', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.psu')),
                ('RAM', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.ram')),
                ('SSD_Storage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.ssdstorage')),
            ],
            options={
                'verbose_name': 'PC Build',
                'verbose_name_plural': 'PC Builds',
                'ordering': ['-created_at'],
            },
        ),
    ]
