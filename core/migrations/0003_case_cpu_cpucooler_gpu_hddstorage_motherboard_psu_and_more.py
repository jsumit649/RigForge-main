# Generated by Django 5.2.5 on 2025-08-09 19:34

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0002_alter_user_managers'),
    ]

    operations = [
        migrations.CreateModel(
            name='Case',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.TextField(help_text='Detailed description of the component So that youser can see what it is in the frontend')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('form_factor', models.CharField(choices=[('ATX', 'ATX'), ('Micro-ATX', 'Micro-ATX'), ('Mini-ITX', 'Mini-ITX')], max_length=20)),
                ('color', models.CharField(blank=True, max_length=50, null=True)),
                ('cooling_support', models.BooleanField(default=True)),
                ('fan_slots', models.PositiveIntegerField(help_text='Number of fan slots available')),
                ('front_usb_ports', models.PositiveIntegerField(help_text='Number of front USB ports')),
            ],
            options={
                'verbose_name': 'Case',
                'verbose_name_plural': 'Cases',
            },
        ),
        migrations.CreateModel(
            name='CPU',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.TextField(help_text='Detailed description of the component So that youser can see what it is in the frontend')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('socket', models.CharField(choices=[('AM4', 'AM4'), ('AM5', 'AM5'), ('LGA1200', 'LGA1200'), ('LGA1700', 'LGA1700'), ('LGA2011', 'LGA2011')], max_length=20)),
                ('cores', models.PositiveIntegerField()),
                ('threads', models.PositiveIntegerField()),
                ('base_clock', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('boost_clock', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('tdp', models.PositiveIntegerField()),
            ],
            options={
                'verbose_name': 'CPU',
                'verbose_name_plural': 'CPUs',
            },
        ),
        migrations.CreateModel(
            name='CPUCooler',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.TextField(help_text='Detailed description of the component So that youser can see what it is in the frontend')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cooler_type', models.CharField(choices=[('Air', 'Air Cooler'), ('Liquid', 'Liquid Cooler'), ('AIO', 'All-in-One Liquid Cooler')], max_length=10)),
                ('socket_compatibility', models.CharField(choices=[('AM4', 'AM4'), ('AM5', 'AM5'), ('LGA1200', 'LGA1200'), ('LGA1700', 'LGA1700'), ('LGA2011', 'LGA2011')], max_length=20)),
                ('cooling_capacity', models.PositiveIntegerField(help_text='Cooling capacity in Watts')),
            ],
            options={
                'verbose_name': 'CPU Cooler',
                'verbose_name_plural': 'CPU Coolers',
            },
        ),
        migrations.CreateModel(
            name='GPU',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.TextField(help_text='Detailed description of the component So that youser can see what it is in the frontend')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('vram', models.CharField(choices=[('2GB', '2GB'), ('4GB', '4GB'), ('6GB', '6GB'), ('8GB', '8GB'), ('10GB', '10GB'), ('12GB', '12GB'), ('16GB', '16GB'), ('24GB', '24GB')], max_length=5)),
                ('memory_type', models.CharField(choices=[('GDDR5', 'GDDR5'), ('GDDR5X', 'GDDR5X'), ('GDDR6', 'GDDR6'), ('GDDR6X', 'GDDR6X')], max_length=10)),
                ('base_clock', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('boost_clock', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('tdp', models.PositiveIntegerField()),
            ],
            options={
                'verbose_name': 'GPU',
                'verbose_name_plural': 'GPUs',
            },
        ),
        migrations.CreateModel(
            name='HDDStorage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.TextField(help_text='Detailed description of the component So that youser can see what it is in the frontend')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('capacity', models.PositiveIntegerField(help_text='Capacity in GB')),
                ('rpm', models.PositiveIntegerField(help_text='Revolutions Per Minute (RPM)')),
            ],
            options={
                'verbose_name': 'HDD Storage',
                'verbose_name_plural': 'HDD Storages',
            },
        ),
        migrations.CreateModel(
            name='Motherboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.TextField(help_text='Detailed description of the component So that youser can see what it is in the frontend')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('socket', models.CharField(choices=[('AM4', 'AM4'), ('AM5', 'AM5'), ('LGA1200', 'LGA1200'), ('LGA1700', 'LGA1700'), ('LGA2011', 'LGA2011')], max_length=20)),
                ('form_factor', models.CharField(choices=[('ATX', 'ATX'), ('Micro-ATX', 'Micro-ATX'), ('Mini-ITX', 'Mini-ITX')], max_length=20)),
                ('ram_type', models.CharField(choices=[('DDR4', 'DDR4'), ('DDR5', 'DDR5')], max_length=10)),
                ('ram_slots', models.PositiveIntegerField()),
                ('max_ram', models.PositiveIntegerField(help_text='Maximum RAM in GB')),
            ],
            options={
                'verbose_name': 'Motherboard',
                'verbose_name_plural': 'Motherboards',
            },
        ),
        migrations.CreateModel(
            name='PSU',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.TextField(help_text='Detailed description of the component So that youser can see what it is in the frontend')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('power_rating', models.PositiveIntegerField(help_text='Power rating in Watts')),
                ('efficiency_rating', models.CharField(choices=[('80+', '80 Plus'), ('80+ Bronze', '80 Plus Bronze'), ('80+ Silver', '80 Plus Silver'), ('80+ Gold', '80 Plus Gold'), ('80+ Platinum', '80 Plus Platinum'), ('80+ Titanium', '80 Plus Titanium')], max_length=20)),
                ('modularity', models.CharField(choices=[('Non-Modular', 'Non-Modular'), ('Semi-Modular', 'Semi-Modular'), ('Fully-Modular', 'Fully Modular')], max_length=20)),
                ('cables_included', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'PSU',
                'verbose_name_plural': 'PSUs',
            },
        ),
        migrations.CreateModel(
            name='RAM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.TextField(help_text='Detailed description of the component So that youser can see what it is in the frontend')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ram_type', models.CharField(choices=[('DDR4', 'DDR4'), ('DDR5', 'DDR5')], max_length=10)),
                ('capacity', models.PositiveIntegerField(help_text='Capacity in GB')),
                ('speed', models.PositiveIntegerField(help_text='Speed in MHz')),
            ],
            options={
                'verbose_name': 'RAM',
                'verbose_name_plural': 'RAMs',
            },
        ),
        migrations.CreateModel(
            name='SSDStorage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.TextField(help_text='Detailed description of the component So that youser can see what it is in the frontend')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('capacity', models.PositiveIntegerField(help_text='Capacity in GB')),
                ('pcie_generation', models.CharField(choices=[('Gen3', 'PCIe Gen 3'), ('Gen4', 'PCIe Gen 4'), ('Gen5', 'PCIe Gen 5')], max_length=10)),
                ('read_speed', models.PositiveIntegerField(help_text='Read Speed in MB/s')),
                ('write_speed', models.PositiveIntegerField(help_text='Write Speed in MB/s')),
            ],
            options={
                'verbose_name': 'SSD Storage',
                'verbose_name_plural': 'SSD Storages',
            },
        ),
        migrations.AlterField(
            model_name='user',
            name='bio',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='user',
            name='email',
            field=models.EmailField(blank=True, max_length=254, null=True, unique=True),
        ),
        migrations.AlterField(
            model_name='user',
            name='username',
            field=models.CharField(max_length=150, unique=True),
        ),
        migrations.CreateModel(
            name='PCBuild',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(blank=True, max_length=200)),
                ('Total_Price', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('CPU', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.cpu')),
                ('CPU_Cooler', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.cpucooler')),
                ('Case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.case')),
                ('GPU', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.gpu')),
                ('HDD_Storage', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.hddstorage')),
                ('Motherboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.motherboard')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pc_builds', to=settings.AUTH_USER_MODEL)),
                ('PSU', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.psu')),
                ('RAM', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.ram')),
                ('SSD_Storage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.ssdstorage')),
            ],
            options={
                'verbose_name': 'PC Build',
                'verbose_name_plural': 'PC Builds',
                'ordering': ['-created_at'],
            },
        ),
    ]
